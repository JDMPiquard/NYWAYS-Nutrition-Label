usda.search.parsed("Clif builders bar", creds.usda, Foundation = F, Survey = F)$fdcId[1]
usda.details.parsed(498022, creds.usda)
testCompleteDetails <- usda.details(498022, creds.usda)
testCompleteDetails
simple_list_to_df(testCompleteDetails$foodNutrients)
testCompleteDetails.foods.df <- testCompleteDetails$foodNutrients
testCompleteDetails.foods.df
simple_list_to_df(testCompleteDetails.foods.df)
?rbind
testCompleteDetails.foods.df[[1]]
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
View(testCompleteDetails)
usda.details.parsed(498022, creds.usda)
testNutrientList <- lapply(testCompleteDetails$foodNutrients, usda.details.parsed.standardise)
View(testNutrientList)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.details.parsed(498022, creds.usda)
usda.searchByUPC('Clif Builders Bar', creds.usda)
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
install.packages('shinyWidgets')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
?div
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
?useShinyjs
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
length(602612201006)
length(as.character(602612201006))
as.character(602612201006)
dim(as.character(602612201006))
nchar(as.character(602612201006))
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
lst_A <- c("TET","RNR")
lst_B = c("RNR_B","BC_TET", "Fred", "RNR_A", "Zero", "ABC_TET")
Pattern = paste(lst_A, collapse="|")
grepl(Pattern, lst_B)
source('/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/FlightStats Data Merger.R')
?ddply
require(dplyr)
?ddply
??ddply
library(dplyr)
?ddply
library(dplyr)
?dplyr
source('/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/FlightStats Data Merger.R')
?ddply
# SETUP ####
require(dplyr)
# the following requires a path to a folder containing ONLY the the csv files with the flight data - the multiple files will be merged together, to support easier data handling
sourceFolder <- "/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/Source Data/flightStats data summer 2020"
# provide path to seat numbers as well
aircraftSeatNumbersPath <- "/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/Source Data/aircraftList.csv"
# provide path to master spreadsheet
topTrafficPath <- "/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/Source Data/Preliminary Worldwide Traffic Data Top 100.csv"
# FUNCTIONS TO LOAD THEN CLEAN FLIGHTSTATS DATA ####
loadFLightStatsFromCSV <- function(folderPath){
filenames <- list.files(sourceFolder, pattern="*.csv", full.names=TRUE)
ldf <- lapply(filenames, read.csv)
l <- length(ldf)
flightstats.df <- ldf[[1]]
if (l > 1 ) {
for (i in 2:length(ldf)){
flightstats.df <- rbind(flightstats.df, ldf[[i]])
}
}
return(flightstats.df)
}
cleanFlightStatsData <- function(fs.df){
result.df <- distinct(fs.df)
result.df <- result.df[result.df$isCodeShare == F, ]
result.df$flightCount <- 1 # assists in the summarise function
return(result.df)
}
addSeatNumbers <- function(fs.df, pathToAircraftCSV){
aircraftCapacities <- read.csv(pathToAircraftCSV)
result.df <- merge(fs.df, aircraftCapacities, by = "aircraft", all.x = TRUE)
}
# basic summary functions for the data ####
# helper function to find most frequent factor, from https://stackoverflow.com/questions/22120781/getting-the-most-frequent-element-in-a-factor-in-r
MaxTable <- function(InVec, mult = FALSE) {
if (!is.factor(InVec)) InVec <- factor(InVec)
A <- tabulate(InVec)
if (isTRUE(mult)) {
levels(InVec)[A == max(A)]
}
else levels(InVec)[which.max(A)]
}
simplySummariseData <- function(fs.df){
result.df <- ddply(fs.df, "fromCode", summarise,
totalAirportFlights = sum(flightCount),
majorAirline = MaxTable(carrierCode)
)
}
simplySummarise2 <- function(fs.df){
result.df <- ddply(fs.df, c("fromCode", "carrierCode"), summarise,
totalAirlineFlights = sum(flightCount)
)
}
# DATA SUMMARIES ####
getPercentageCoveragePerAirline <- function(fs.df){
byAirline.df <- simplySummarise2(fs.df)
byAirport.df <- simplySummariseData(fs.df)
combinedData.df <- merge(byAirline.df, byAirport.df, by= "fromCode", all=TRUE)
combinedData.df$pctAptFlights <- combinedData.df$totalAirlineFlights/combinedData.df$totalAirportFlights
return(combinedData.df)
}
getPercentageCoveragePerAirport <- function(fs.df){
master.df <- read.csv(topTrafficPath)
byAirport.df <- simplySummariseData(fs.df)
combinedData1.df <- merge(master.df, byAirport.df, by.x = "CODE", by.y = "fromCode")
perAirlineData <- getPercentageCoveragePerAirline(fs.df)
result.df <- merge(combinedData1.df, perAirlineData, by.x = c("CODE", "majorAirline"), by.y = c("fromCode", "carrierCode"), all.x = TRUE)
result.df <- result.df[order(-result.df$RANK),]
return(result.df)
}
# WORK ON MASTER SPREASHEET
# TODO:
# get percentage of each airport dominated by each airline
# download master spreadsheet with the top airline identified and percentage it covers
# SCRIPT TO RUN ####
# load data - may take a few minutes for large datasets
flightstats.df <- loadFLightStatsFromCSV(sourceFolder)
master.df <- read.csv(topTrafficPath)
flightstats.df <- cleanFlightStatsData(flightstats.df)
flightstats.df2 <- addSeatNumbers(flightstats.df, aircraftSeatNumbersPath)
?ddply
.rs.restartR()
require(dplyr)
?ddply
require(dplyr)
?ddply
library(dplyr)
?ddply
library(dplyr)
?ddply
install.packages("dplyr")
install.packages("dplyr")
version
library(dplyr)
install.packages('dplyr')
library(dplyr)
?ddply
install.packages('dplyr')
library(dplyr)
?ddply
??ddply
install.packages('plyr')
?ddply
library(plyr)
library(plyr)
library(dplyr)
?ddply
source('/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/FlightStats Data Merger.R')
View(coveragePerAirline)
topTrafficPath <- "/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/Source Data/Worldwide Traffic Data Top 124.csv"
master.df <- read.csv(topTrafficPath)
flightstats.df <- cleanFlightStatsData(flightstats.df)
flightstats.df2 <- addSeatNumbers(flightstats.df, aircraftSeatNumbersPath)
# step 2
# airlinesperAirport <- simplySummarise2(flightstats.df)
#
# airlinesperAirport <-  merge(airlinesperAirport, master.df,
#                              by.x = "fromCode", by.y = "CODE", all = T)
# step 3
coveragePerAirline <- getPercentageCoveragePerAirline(flightstats.df2)
write.csv(coveragePerAirline, file = '/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/airlineCoveragePerAirport2019Nov18.csv', row.names = F)
# step 4
masterMajorAirline.df <- getPercentageCoveragePerAirport(flightstats.df2)
write.csv(masterMajorAirline.df, file = '/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/masterWithMajorAirline2019Nov18.csv', row.names = F)
View(masterMajorAirline.df)
master.df$CODE %in% masterMajorAirline.df$CODE
temp.workingAirports <- master.df$CODE %in% masterMajorAirline.df$CODE
master.df[,master.df$CODE]
master.df[,CODE]
master.df[,1]
View(master.df)
master.df[,3]
master.df[!temp.workingAirports,3]
View(coveragePerAirline)
source('/Volumes/GoogleDrive/My Drive/PortrHacks/FlightScheduleAnalysis/Scheduled Arrivals By Airport/dowloadFlightArrivalsByAirport.R')
install.packages('httr')
install.packages('lubridate')
install.packages('jsonlite')
source('/Volumes/GoogleDrive/My Drive/PortrHacks/FlightScheduleAnalysis/Scheduled Arrivals By Airport/dowloadFlightArrivalsByAirport.R')
source('/Volumes/GoogleDrive/My Drive/PortrHacks/FlightScheduleAnalysis/Scheduled Arrivals By Airport/dowloadFlightArrivalsByAirport.R')
source('/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/FlightStats Data Merger.R')
?agrep
?agrep("apple","apples")
agrep("apple","apples")
agrep("apple","sun")
agrepl("apple","sun")
agrepl("apple","apples")
agrepl("apple","appleseed")
agrepl("apple","apple juice")
agrepl("apple juice","apple")
?grepl
shiny::runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
?agrepl
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('googleVis')
install.packages('DT')
install.packages('shinyjs')
install.packages('httr')
install.packages('jsonlite')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
install.packages('shiny')
install.packages("shiny")
install.packages('shinycssloaders')
install.packages('shinyWidgets')
shiny::runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.searchByUPC(858369006191, creds.usda)
usda.searchByUPC(858369006504, creds.usda)
?merge
shiny::runApp('Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
setwd('/Users/jdpiquard/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods.list <- loadDataFromCSV(foodDataFolder)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods.list <- loadDataFromCSV(foodDataFolder)
foods.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods.df <- mergeFoodData(foods.list)
View(foods.df)
typeof(foods.list[[1]]$NutriRating)
typeof(foods.list[[2]]$NutriRating)
typeof(foods.list[[3]]$NutriRating)
typeof(foods.list[[4]]$NutriRating)
typeof(foods.list[[5]]$NutriRating)
typeof(foods.list[[5]]$NutriRating[1])
paste('hi', NA)
NA
typeof(foods.list[[5]]$NutriRating[1])
foods.list[[5]]$NutriRating[1]
foods.list[[5]]$['NutriRating'][1]
foods.list[[5]]['NutriRating'][1]
foods.list[[5]]['NutriRating']
foods.list[[5]]['NutriRating'][1]
foods.list[[5]]['NutriRating'][[1]]
foods.list[[5]][,'NutriRating']
foods.list[[5]][1,'NutriRating']
test.df <- foods.list[[5]]
View(test.df)
test.df['newCol'] <- paste(test.df$Purpose, test.df$Calories.per.gram, sep = ", ")
test.df['newCol'] <- paste(test.df$Purpose, test.df$Calories.per.gram, sep = ", ", na.rm=T)
test.df['newCol'] <- paste(test.df$Purpose, test.df$Calories.per.gram, sep = ", ")
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test2.df <- pasteFoodData(test.df, 'newCol', 'Purpose', 'Calories.per.gram')
View(test2.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
View(test2.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test2.df <- pasteFoodData(test.df, 'newCol', 'Purpose', 'Calories.per.gram')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test2.df <- pasteFoodData(test.df, 'newCol', 'Purpose', 'Calories.per.gram')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test2.df <- pasteFoodData(test.df, 'newCol', 'Purpose', 'Calories.per.gram')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test2.df <- pasteFoodData(test.df, 'newCol', 'Purpose', 'Calories.per.gram')
test.df
test.df[is.na(test.df)] <- ""
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.list <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.list <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.list <- mergeFoodData(foods.list)
View(testFoods2.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
?sum
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
View(testFoods2.list)
View(testFoods2.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
1 + NA
1 + ifelse(is.na(NA), 0, 1000)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
1 + naCheck(NA)
naCheck(NA)
naCheck(NA, replaceBy = 0)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
1 + naCheck(NA)
naCheck(NA, replaceBy = 0)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
testFoods2.df <- mergeFoodData(foods.list)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods.list <- loadDataFromCSV(foodDataFolder)
foods.df <- mergeFoodData(foods.list)
View(foods.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods2.df <- nyways.api.getIngredients(local = T)
View(foods2.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods2.df <- nyways.api.getIngredients(local = T)
View(foods2.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
foods2.df <- nyways.api.getIngredients(local = T)
names(foods2.df)
agrepl("APPLES","apple")
agrepl("Apples","apple")
agrepl("Apple","apple")
agrepl("Apple","apples")
agrepl("Apple","APPLES")
?tolower
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
temp.details.df <- app.giveScoresFromUPC('Soylent')
View(temp.details.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
temp.details.df <- app.getFullDetailsFromUPC('Soylent')
?agrepl
temp.details.df$ingredients
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
temp.details.df <- app.getFullDetailsFromUPC('Soylent')
?strsplit
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
temp.details.df <- app.getFullDetailsFromUPC('Soylent')
temp.details.df$ingredients
?agrepl
paste(temp.details.df$ingredients, collapse = "|")
tolower(paste(temp.details.df$ingredients, collapse = "|"))
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
data.frame(Name = foodDetails.list$ingredients)
data.frame(Name = temp.details.df$ingredients)
temp.details.df <- app.getFullDetailsFromUPC('Soylent')
data.frame(Name = temp.details.df$ingredients)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
app.parse.ingredients(temp.details.df)
temp.pattern <- toupper(paste(foodDetails.list$ingredients, collapse = "|"))
temp.matches <- agrepl(temp.pattern, nyways.foods.df)
temp.pattern <- toupper(paste(temp.details.df$ingredients, collapse = "|"))
temp.matches <- agrepl(temp.pattern, nyways.foods.df)
temp.pattern
temp.matches
app.parse.ingredients <- function(foodDetails.list){
temp.pattern <- toupper(paste(foodDetails.list$ingredients, collapse = "|"))
temp.matches <- agrepl(temp.pattern, nyways.foods.df$Name)
temp.matches.df <- nyways.foods.df[temp.matches,]
results.df <- data.frame(Name = foodDetails.list$ingredients)
results.df <- merge(results.df, temp.matches.df, all.x = T)
return(results.df)
}
app.parse.ingredients(temp.details.df)
temp.pattern <- toupper(paste(temp.details.df$ingredients, collapse = "|"))
temp.matches <- agrepl(temp.pattern, nyways.foods.df$Name)
temp.matches
nyways.foods.df$Name
temp.details.df$ingredients
ingredients.all <- nyways.foods.df$Name
ingredients.soylent <- temp.details.df$ingredients
ingredients.soylent <- data.frame(names = temp.details.df$ingredients)
ingredients.all <- data.frame(names = nyways.foods.df$Name)
View(ingredients.all)
View(ingredients.soylent)
testMatch.df <- agrepl("RIBOFLAVIN", ingredients.all$names)
testMatch.df <- data.frame(matches = agrepl("RIBOFLAVIN", ingredients.all$names))
View(testMatch.df)
View(testMatch.df)
testMatch.df <- data.frame(matches = agrepl(paste(ingredients.soylent$names , collapse = T), ingredients.all$names))
testMatch.df <- data.frame(matches = agrepl(paste(ingredients.soylent$names , collapse = "|"), ingredients.all$names))
View(testMatch.df)
paste(ingredients.soylent$names , collapse = "|")
testMatch.df <- data.frame(matches = agrepl(paste(ingredients.soylent$names , collapse = "|"), ingredients.all$names, ignore.case = T, fixed = F))
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
parsedIngredients1.df <- app.parse.ingredients(temp.details.df)
View(parsedIngredients1.df)
View(ingredients.soylent)
testMatch.df <- data.frame(matches = grepl(paste(ingredients.soylent$names , collapse = "|"), ingredients.all$names, ignore.case = T, fixed = F))
View(testMatch.df)
testMatch2.df <- nyways.foods.df[testMatch.df,]
testMatch2.df <- nyways.foods.df[testMatch.df$matches,]
View(testMatch2.df)
?grepl
View(ingredients.soylent)
temp.details.df$description
temp.details.df$servingSizeUnit
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent <- app.getFullDetailsFromUPC('Soylent')
test.soylent <- app.getFullDetailsFromUPC('Soylent')
test.soylent.ingredients.df <- test.soylent$parsedIngredients
View(test.soylent.ingredients.df)
test.soylent$ingredients
temp.df <- data.frame(Name = foodDetails.list$ingredients, R = 1:length(foodDetails.list$ingredients))
temp.df <- data.frame(Name = test.soylent$ingredients, R = 1:length(test.soylent$ingredients))
View(temp.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent <- app.getFullDetailsFromUPC('Soylent')
test.soylent.ingredients.df <- test.soylent$parsedIngredients
View(test.soylent.ingredients.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent.ingredients.pretty.df <- app.prettify.ingredients(test.soylent)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent <- app.getFullDetailsFromUPC('Soylent')
test.soylent.ingredients.pretty.df <- app.prettify.ingredients(test.soylent)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent.ingredients.pretty.df <- app.prettify.ingredients(test.soylent)
test.soylent$parsedIngredients
test.soylent$parsedIngredients$R
test.soylent$parsedIngredients$NutriRating
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
emojiRating(test.soylent$parsedIngredients$NutriRating)
test.soylent.ingredients.pretty.df <- app.prettify.ingredients(test.soylent)
test.soylent$parsedIngredients
test.soylent$parsedIngredients$R
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent.ingredients.pretty.df <- app.prettify.ingredients(test.soylent)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
test.soylent <- app.getFullDetailsFromUPC('soylent')
pretty.df <- app.prettify.ingredients(test.soylent)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
View(pretty.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
View(pretty.df)
pretty.df <- app.prettify.ingredients(test.soylent)
View(pretty.df)
rownames(pretty.df) <- NULL
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
View(pretty.df)
pretty.df <- naCheck(pretty.df$Score)
pretty.df <- app.prettify.ingredients(test.soylent)
pretty.df$Score <- naCheck(pretty.df$Score)
View(pretty.df)
pretty.df <- app.prettify.ingredients(test.soylent)
pretty.df$Score <- naCheck(pretty.df$Score, replaceBy = 0)
View(pretty.df)
pretty.df$Score2 <- emojiRating(pretty.df$Score)
View(pretty.df)
pretty.df$Score2 <- lapply(pretty.df$Score, emojiRating)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
View(pretty.df)
lapply(test.soylent$parsedIngredients$NutriRating, emojiRating)
as.data.frame(lapply(test.soylent$parsedIngredients$NutriRating, emojiRating))
unlist(lapply(test.soylent$parsedIngredients$NutriRating, emojiRating))
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
pretty.df <- app.prettify.ingredients(test.soylent)
