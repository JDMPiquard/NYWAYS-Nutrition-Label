return(combinedData.df)
}
simplySummariseData <- function(fs.df){
result.df <- ddply(fs.df, "fromCode", summarise,
totalAirportFlights = count(fltNo),
majorAirline = MaxTable(carrierCode)
)
}
simplySummarise2 <- function(fs.df){
result.df <- ddply(fs.df, c("fromCode", "carrierCode"), summarise,
totalAirlineFlights = sum(flightCount)
)
}
# DATA SUMMARIES ####
getPercentageCoveragePerAirline <- function(fs.df){
byAirline.df <- simplySummarise2(fs.df)
byAirport.df <- simplySummariseData(fs.df)
combinedData.df <- merge(byAirline.df, byAirport.df, by= "fromCode", all=TRUE)
combinedData.df$pctAptFlights <- combinedData.df$totalAirlineFlights/combinedData.df$totalAirportFlights
return(combinedData.df)
}
coveragePerAirline <- getPercentageCoveragePerAirline(flightstats.df2)
flightstats.df <- loadFLightStatsFromCSV(sourceFolder)
master.df <- read.csv(topTrafficPath)
flightstats.df <- cleanFlightStatsData(flightstats.df)
flightstats.df2 <- addSeatNumbers(flightstats.df, aircraftSeatNumbersPath)
source('/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/FlightStats Data Merger.R')
simplySummariseData <- function(fs.df){
result.df <- ddply(fs.df, "fromCode", summarise,
totalAirportFlights = sum(flightCount),
majorAirline = MaxTable(carrierCode)
)
}
simplySummarise2 <- function(fs.df){
result.df <- ddply(fs.df, c("fromCode", "carrierCode"), summarise,
totalAirlineFlights = sum(flightCount)
)
}
coveragePerAirline <- getPercentageCoveragePerAirline(flightstats.df2)
View(coveragePerAirline)
write.csv(coveragePerAirline, file = '/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/airlineCoveragePerAirport.csv', row.names = F)
airlinesperAirport <- simplySummarise2(flightstats.df)
airlinesperAirport <-  merge(airlinesperAirport, master.df,
by.x = "fromCode", by.y = "CODE", all = T)
View(airlinesperAirport)
getPercentageCoveragePerAirport <- function(fs.df){
master.df <- read.csv(topTrafficPath)
byAirport.df <- simplySummariseData(fs.df)
combinedData1.df <- merge(master.df, byAirport.df, by.x = "CODE", by.y = "fromCode")
perAirlineData <- getPercentageCoveragePerAirline(fs.df)
result.df <- merge(combinedData1.df, perAirlineData, by.x = c("CODE", "majorAirline"), by.y = c("fromCode", "carrierCode"), all.x = TRUE)
return(result.df)
}
masterMajorAirline.df <- getPercentageCoveragePerAirport(flightstats.df2)
View(masterMajorAirline.df)
getPercentageCoveragePerAirport <- function(fs.df){
master.df <- read.csv(topTrafficPath)
byAirport.df <- simplySummariseData(fs.df)
combinedData1.df <- merge(master.df, byAirport.df, by.x = "CODE", by.y = "fromCode")
perAirlineData <- getPercentageCoveragePerAirline(fs.df)
result.df <- merge(combinedData1.df, perAirlineData, by.x = c("CODE", "majorAirline"), by.y = c("fromCode", "carrierCode"), all.x = TRUE)
result.df <- result.df[order(-RANK),]
return(result.df)
}
masterMajorAirline.df <- getPercentageCoveragePerAirport(flightstats.df2)
getPercentageCoveragePerAirport <- function(fs.df){
master.df <- read.csv(topTrafficPath)
byAirport.df <- simplySummariseData(fs.df)
combinedData1.df <- merge(master.df, byAirport.df, by.x = "CODE", by.y = "fromCode")
perAirlineData <- getPercentageCoveragePerAirline(fs.df)
result.df <- merge(combinedData1.df, perAirlineData, by.x = c("CODE", "majorAirline"), by.y = c("fromCode", "carrierCode"), all.x = TRUE)
result.df <- result.df[order(-result.df$RANK),]
return(result.df)
}
masterMajorAirline.df <- getPercentageCoveragePerAirport(flightstats.df2)
write.csv(masterMajorAirline.df, file = '/Volumes/GoogleDrive/My Drive/PortrHacks/1911 - Portr 100 Hitlist/masterWithMajorAirline.csv', row.names = F)
shiny::runApp('/Volumes/GoogleDrive/My Drive/MacBook Workspace/J24D Desktop/code/FGF-display')
runApp('Desktop/FGFood')
list(
Survey.(FNDDS) = T,
Foundation = T,
Branded = T
)
list(
Survey.(FNDDS) = T
Foundation = T
Branded = T
)
list(
Foundation = T
Branded = T
)
list(one = "one")
list(
Foundation = T,
Branded = T
)
list(
"Foundation" = T,
Branded = T
)
list(
"Foundation" = T,
Branded = T,
)
list(
"Foundation" = T,
Branded = T,
)
list(
"Foundation" = T,
Branded = T,
"Survey (FNDDS)" = T)
?POST
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.search("soylent")
usda.search("soylent", api_key = )
usda.search("soylent", api_key = bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC)
usda.search("soylent", api_key = "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.search("soylent", api_key = "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
?get
?GET
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.details(598072, "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.search("5409200601", api_key = "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.search("854092006019", api_key = "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
source('~/Desktop/NPS-formatter-safecopy.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.search("815709021825", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.search("1570902182", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.search("collagen", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.search("bulletproof", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
usda.details("595174", "595174")
usda.details("595174", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempSearch <- usda.search("bulletproof", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempDetails <- usda.details("595174", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
require(DT)
datatable(tempSearch)
tempSearch$foods
datatable(tempSearch$foods)
datatable
datatable(iris)
tempSearch.df <- as.data.frame(tempSearch$foods)
View(tempSearch.df)
length(tempSearch)
length(tempSearch$foods)
tempSearch[[1]]
tempSearch.df <- as.data.frame(tempSearch)
?as.data.frame()
tempSearch$foods[[1]]
as.data.frame(tempSearch$foods[[1]])
names(tempSearch$foods)
names(tempSearch$foods[[1]])
?data.frame()
lapply(tempSearch$foods, as.data.frame)
rbind(lapply(tempSearch$foods, as.data.frame))
rbind(unlist(lapply(tempSearch$foods, as.data.frame)))
unlist(lapply(tempSearch$foods, as.data.frame))
as.data.frame(lapply(tempSearch$foods, as.data.frame))
simple_list_to_df <- function(simpleList){
l <- length(simpleList)
if(l == 0){
return(NULL)
}
temp.list <- lapply(simpleList, as.data.frame)
result.df <- temp.list[[1]]
if(l == 1){
} else {
for(i in 2:l){
result.df <- rbind(result.df,temp.list[[1]])
}
}
return(result.df)
}
simple_list_to_df(tempSearch$foods)
datatable(simple_list_to_df(tempSearch$foods))
tempDetails$foodClass
tempDetails$description
tempDetails$servingSize
tempDetails$tableAliasName
tempDetails$foodComponents
tempDetails$foodAttributes
tempDetails$foodNutrients
tempNutrients.df <- simple_list_to_df(tempDetails$foodNutrients)
View(tempNutrients.df)
View(tempNutrients.df[[1]])
View(tempNutrients.df[1])
tempNutrients.df2 <- as.data.frame(tempDetails$foodNutrients)
lapply(tempDetails$foodNutrients, as.data.frame)
unlist(lapply(tempDetails$foodNutrients, as.data.frame))
?unlist
unlist(lapply(tempDetails$foodNutrients, as.data.frame), use.names = FALSE)
simple_list_to_df <- function(simpleList){
l <- length(simpleList)
if(l == 0){
return(NULL)
}
temp.list <- lapply(simpleList, as.data.frame)
result.df <- temp.list[[1]]
if(l == 1){
} else {
for(i in 2:l){
result.df <- rbind(result.df,temp.list[[i]])
}
}
return(result.df)
}
tempNutrients.df <- simple_list_to_df(tempDetails$foodNutrients)
View(tempNutrients.df)
datatable(simple_list_to_df(tempNutrients.df))
View(tempNutrients.df)
datatable(tempNutrients.df)
tempDetails$foodAttributes
tempDetails$labelNutrients
tempDetails$foodPortions
tempDetails$servingSize
tempDetails$servingSizeUnit
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.search.parsed("epic provisions")
usda.search.parsed("epic provisions", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempDetails$servingSize
tempNutrients.df[,c("nutrient.name", "amount")]
tempNutrients.df[,c("nutrient.name", "amount", "nutrient.unit.name")]
tempNutrients.df[,c("nutrient.name", "amount", "nutrient.unitName")]
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.details.parsed("541545","bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempDetails$foodClass
tempDetails2 <- tempDetails
tempDetails2$foodNutrients <- NULL
tempDetails2$foodAttributes
tempDetails2$foodAttributes <- NULL
tempDetails2$foodComponents
tempDetails2$foodComponents <- NULL
tempDetails2$foodPortions
tempDetails2$foodPortions <- NULL
tempDetails2$labelNutrients
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
tempNewDetails_parsed <- usda.details.parsed("541545","bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempNewDetails_parsed$nutrients
tempNewDetails_parsed$ingredients
unlist(strsplit(tempNewDetails_parsed$ingredients, ","))
trimws(unlist(strsplit(tempNewDetails_parsed$ingredients, ",")))
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
tempNewDetails_parsed <- usda.details.parsed("541545","bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempNewDetails_parsed <- usda.details.parsed("541545","bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
tempNewDetails_parsed <- usda.details.parsed("541545","bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC")
tempNewDetails_parsed$nutrients[tempNewDetails_parsed$nutrients$nutrient.id==1008,]
tempNewDetails_parsed$nutrients[tempNewDetails_parsed$nutrients$nutrient.id==1008,tempNewDetails_parsed$nutrients$amount]
tempNewDetails_parsed$nutrients[tempNewDetails_parsed$nutrients$nutrient.id==1008,]$amount
?floor
capValue <- function(value, cap){
return(ifelse(value > cap, cap, value))
}
capValue(9,10)
capValue(11,10)
capValue(10,10)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.details.getNutrientByID(tempNewDetails_parsed,291)
usda.details.getNutrientByID(tempNewDetails_parsed,291) == 0
?type
typeof(usda.details.getNutrientByID(tempNewDetails_parsed,291))
is.null(usda.details.getNutrientByID(tempNewDetails_parsed,291))
is.na(usda.details.getNutrientByID(tempNewDetails_parsed,291))
typeof(tempNewDetails_parsed$nutrients)
typeof(tempNewDetails_parsed$nutrients[[1]])
typeof(tempNewDetails_parsed$nutrients[1])
(usda.details.getNutrientByID(tempNewDetails_parsed,1258))
(usda.details.getNutrientByID(tempNewDetails_parsed,1079))
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
usda.details.getNutrientByID(tempNewDetails_parsed, 1257)
datatable(tempNewDetails_parsed$nutrients)
datatable(simple_list_to_df(tempSearch$foods))
tempNutrients.df <- simple_list_to_df(tempDetails$foodNutrients)
tempNutrients.df <- simple_list_to_df(tempDetails$foodNutrients)
datatable(tempNutrients.df)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nutriscore.beta(tempNewDetails_parsed)
nutriscore.beta(usda.details.parsed("595174", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC"))
result_bulletproof <- (usda.details.parsed("595174", "bKtg1jeCR4rtJznJL02OwVEsXowoecbbuKkwClHC"))
result_bulletproof
require(httr)
require(jsonlite)
?fromJSON
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
test.macros.list <- nyways.api.getMacros(local=F)
View(test.macros.list)
test.macros.list$keto$`protein-max`
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test.macros.list <- nyways.api.getMacros(local=F)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-database-apis.R')
test.macros.list <- nyways.api.getMacros(local=F)
test.macros.list <- nyways.api.getMacros(local=T)
setwd("/Users/jdpiquard/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label")
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
?warning
temp.search <- usda.search.parsed("602652207006",
api_key,
Branded = T,
Foundation = T,
Survey = T)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
temp.search <- usda.search.parsed("602652207006",
creds.usda,
Branded = T,
Foundation = T,
Survey = T)
temp.search$fdcId
temp.search <- usda.search.parsed("kind protein",
creds.usda,
Branded = T,
Foundation = T,
Survey = T)
temp.search.raw <- usda.search("kind protein",
creds.usda,
Branded = T,
Foundation = T,
Survey = T)
temp.search.raw$foods
simple_list_to_df(temp.search.raw$foods)
temp.search.raw$foods[[1]]$fdcId
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
usda.searchByUPC(602652207006, creds.usda)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
kindprotein.upc <- usda.searchByUPC(602652207006, creds.usda)
app.calculate.nutriscore(kindprotein.upc)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
app.calculate.nutriscore(kindprotein.upc)
kindprotein.upc$ingredients
whey.upc <- usda.searchByUPC(857965007038, creds.usda)
whey.upc <- usda.searchByUPC(702534568338, creds.usda)
whey.upc <- usda.searchByUPC(602652207006, creds.usda)
lentils.test <- usda.searchByUPC("lentils", creds.usda)
lentils.test$description
lentils.test$nutrients
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
nyways.macros.single(fromJSON('{
"proteinMin": 0.15,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.8,
"carbsMin": 0.1,
"carbsMax": 0.05
}'),20,3,10)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nyways.macros.single(fromJSON('{
"proteinMin": 0.15,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.8,
"carbsMin": 0.1,
"carbsMax": 0.05
}'),20,3,10)
nyways.macros.single(fromJSON('{
"proteinMin": 0.15,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.8,
"carbsMin": 0.1,
"carbsMax": 0.05
}'),16,10,4)
nyways.macros.single(fromJSON('{
"proteinMin": 0.15,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.8,
"carbsMin": 0.1,
"carbsMax": 0.05
}'),16,3,4)
nyways.macros.single(fromJSON('{
"proteinMin": 0.15,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.8,
"carbsMin": 0.05,
"carbsMax": 0.1
}'),16,10,4)
nyways.macros.single(fromJSON('{
"proteinMin": 0.1,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.95,
"carbsMin": 0.00,
"carbsMax": 0.1
}'),16,10,4)
nyways.macros.single <- function(macros.list.single, g_fat, g_carbs, g_protein){
fat_cals <- 9*g_fat
protein_cals <- 4*g_protein
carb_cals <- 4*g_carbs
calculated_cals <- fat_cals + protein_cals + carb_cals
print(calculated_cals)
fat <- fat_cals/calculated_cals
protein <- protein_cals/calculated_cals
carbs <- carb_cals/calculated_cals
if(fat < macros.list.single$fatMax
& fat > macros.list.single$fatMin
& protein < macros.list.single$proteinMax
& protein > macros.list.single$proteinMin
& carbs < macros.list.single$carbsMax
& carbs > macros.list.single$carbsMin){
return(T)
} else {
return(F)
}
}
nyways.macros.single(fromJSON('{
"proteinMin": 0.1,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.95,
"carbsMin": 0.00,
"carbsMax": 0.1
}'),16,10,4)
nyways.macros.single(fromJSON('{
"proteinMin": 0.1,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.95,
"carbsMin": 0.00,
"carbsMax": 0.1
}'),16,3,4)
nyways.macros.single(fromJSON('{
"proteinMin": 0.1,
"proteinMax": 0.2,
"fatMin": 0.75,
"fatMax": 0.95,
"carbsMin": 0.00,
"carbsMax": 0.1
}'),17,7,7)
# Checking macro profiles ####
nyways.macros.calculateSplit <- function(g_fat, g_carbs, g_protein, productName="AcmeFood"){
fat_cals <- 9*g_fat
protein_cals <- 4*g_protein
carb_cals <- 4*g_carbs
calculated_cals <- fat_cals + protein_cals + carb_cals
fat_pct <- fat_cals/calculated_cals
protein_pct <- protein_cals/calculated_cals
carbs_pct <- carb_cals/calculated_cals
results.df <-  data.frame(
product = c(productName),
fat_pct = c(fat_pct),
carbs_pct = c(carbs_pct),
protein_pct = c(protein_pct)
)
return(results.df)
}
nyways.macros.calculateSplit(17,7,7)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
nyways.macros.calculateScores(2,3,25,g_fiber=0,kcals = 130, g_serving = 30, g_sugar = 2)
nyways.macros.calculateScores(17,7,7,g_fiber=3,kcals = 190, g_serving = 32, g_sugar = 1)
round(0.02)
?round
round(0.02, digits = 2)
round(0.01777, digits = 2)
displayAsPct <- function(fraction){
result <- paste(round(fraction*100), "%")
return(result)
}
displayAsPct(0.02)
displayAsPct <- function(fraction){
result <- paste0(round(fraction*100), "%")
return(result)
}
?cbind
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/nyways-food-label-interpreter.R')
View(kindprotein.upc)
testAllscores.df <- nyways.macros.allScores(name = "Almond Butter", g_fat = 17, g_carbs = )
tempKind.df <- kindprotein.upc$nutrients
View(tempKind.df)
usda.details.getNutrientByID(kindprotein.upc,1005)
usda.details.getNutrientByID(kindprotein.upc,3000)
test.empty <- usda.details.getNutrientByID(kindprotein.upc,3000)
typeof(test.empty)
typeof(usda.details.getNutrientByID(kindprotein.upc,1005))
kindprotein.upc$nutrients[kindprotein.upc$nutrients$nutrient.id==3000,]$amount
kindprotein.upc$nutrients[kindprotein.upc$nutrients$nutrient.id==3000,]$amount == 0
length(kindprotein.upc$nutrients[kindprotein.upc$nutrients$nutrient.id==3000,]$amount)
length(kindprotein.upc$nutrients[kindprotein.upc$nutrients$nutrient.id==1005,]$amount)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
usda.details.parseCommonNutrients(kindprotein.upc)
kindprotein.upc$description
kindprotein.upc$foodClass
kindprotein.upc$tableAliasName
kindprotein.upc$brandedFoodCategory
kindprotein.upc$description
temp.search$description
temp.search$score
temp.search$brandOwner
kindprotein.upc$brandOwner
kindprotein.upc$description
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/usda-wrappers.R')
kindprotein.upc$servingSize
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
app.calculate.allScores(kindprotein.upc)
source('~/Code2/NYWAYS R Shiny/NYWAYS-Nutrition-Label/lib/app-master-nyways-food-label.R')
app.calculate.allScores(kindprotein.upc)
app.calculate.allScores(lentils.test)
